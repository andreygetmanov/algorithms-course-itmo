# -*- coding: utf-8 -*-
"""Lab 2. Direct methods.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17xVJ_3IuZgOyXzUvBfpqdoewsyPf-unH
"""

import math
import random
import numpy as np
from scipy.optimize import minimize
from matplotlib import pyplot as plt
import tqdm

"""#Functions"""

def calc_n(a, b, eps):
  return abs((a - b) / eps)

def func1(x):
  return x ** 3

def func2(x):
  return abs(x - 0.2)

def func3(x):
  return x * np.sin(1 / x)

def exhaustive(a, b, eps, func):
  n = math.floor(calc_n(a, b, eps))
  x = []

  for k in range(0, n + 1):
    temp = a + k * ((b - a) / n)
    x.append(temp)
  
  func_list = [func(xk) for xk in x]

  x_min = func_list.index(min(func_list))

  return x[x_min], n + 1

def dichotomy(a, b, eps, func):   # N(f) = n * 2
  d = random.uniform(0, eps)
  x1 = 0
  x2 = 0
  n = 0
  fn = 0
  while abs(a - b) >= eps:
    n += 1
    x1 = (a + b - d) / 2
    x2 = (a + b + d) / 2
    if func(x1) <= func(x2):
      fn += 2
      b = x2
    else:
      a = x1
      fn += 2
  return (a, b), n, fn

def golden_ratio(a, b, eps, func): 
  x1 = 0
  x2 = 0
  flag = 0
  n = 0
  fn = 1
  while abs(a - b) >= eps:
    n += 1
    if flag == 0:
      x1 = a + (3 - math.sqrt(5)) / 2 * (b - a)
      x2 = b + (math.sqrt(5) - 3) / 2 * (b - a)
    elif flag == 1:
      x1 = a + (3 - math.sqrt(5)) / 2 * (b - a)
    elif flag == 2:
      x2 = b + (math.sqrt(5) - 3) / 2 * (b - a)
    if func(x1) <= func(x2):
      b = x2
      x2 = x1
      flag = 1
      fn += 1
    else:
      a = x1
      x1 = x2
      flag = 2
      fn += 1
  return (a, b), n, fn

def f_linear(x, a, b):
    return a * x + b

def f_rational(x, a, b):
    return a / ( 1 + b * x )

def least_squares(ab):
    a, b = ab
    global x, y
    global func
    return np.sum( (func(x, a, b) - y)**2) / x.shape[0]

def brute_2d(func, limits, eps):
    ab1, ab2 = limits
    
    a1, b1 = ab1
    n1 = int((b1 - a1) / eps)  
    
    a2, b2 = ab2
    n2 = int((b2 - a2) / eps)
    
    min_y = float("inf")
    min_x = 0
    
    for k1 in tqdm.tqdm(range(n1 + 1)):
        x1 = a1 + k1 * (b1 - a1) / n1
        for k2 in range(n2 + 1):
            x2 = a2 + k2 * (b2 - a2) / n2
            
            y = func((x1, x2))
            if y < min_y:
                min_y = y
                min_x = (x1, x2)
    return min_x

"""# One-dimensional

##Exhaustive
"""

exhaustive(0, 1, 0.001, func1)

exhaustive(0, 1, 0.001, func2)

exhaustive(0.01, 1, 0.001, func3)

"""## Dichotomy"""

dichotomy(0, 1, 0.001, func1)

dichotomy(0, 1, 0.001, func2)

dichotomy(0.1, 1, 0.001, func3)

"""## Golden ratio"""

golden_ratio(0, 1, 0.001, func1)

golden_ratio(0, 1, 0.001, func2)

golden_ratio(0.1, 1, 0.001, func3)

"""# Data generation"""

random.seed(42)
a, b = random.random(), random.random()

max_x = 100

x = np.array([k / 100 for k in np.arange(0, max_x + 1, 1)])
y = np.array([a * x[k] + b + np.random.normal(0, 1) for k in range(len(x))])
y_real = np.array([a * x[k] + b for k in range(len(x))])

"""#Linear

##Exhaustive
"""

func = f_linear
opt_lin_1 = brute_2d(least_squares, limits=((-1, 1), (-1, 1)), eps=0.001)

"""##Gauss"""

ab_init = [1, 1]
func = f_linear
opt_lin_2 = optimize.minimize(least_squares, ab_init, method='Powell', options={'xatol': 1e-3, 'disp': True})

"""##Nelder-Mead"""

ab_init = [1, 1]
func = f_linear
opt_lin_3 = optimize.minimize(least_squares, ab_init, method='nelder-mead', options={'xatol': 1e-3, 'disp': True})

"""##Plot"""

plt.figure(figsize=(18,9))
fig1 = plt.scatter(x, y, c='grey')
fig2 = plt.plot(x, y_real, label='real')
fig3 = plt.plot(x, f_linear(x, opt_lin_1[0], opt_lin_1[1]), label='exhaustive')
fig4 = plt.plot(x, f_linear(x, opt_lin_2.x[0], opt_lin_2.x[1]), label='gauss')
fig5 = plt.plot(x, f_linear(x, opt_lin_3.x[0], opt_lin_3.x[1]), label='nelder-mead')
plt.legend()
plt.grid(True)
plt.show()

"""#Rational

##Exhaustive
"""

func = f_rational
opt_rat_1 = brute_2d(least_squares, limits=((-1, 1), (-1, 1)), eps=0.001)

"""##Gauss"""

ab_init = [1, 1]
func = f_rational
opt_rat_2 = optimize.minimize(least_squares, ab_init, method='Powell', options={'xatol': 1e-3, 'disp': True})

"""##Nelder-Mead"""

ab_init = [1, 1]
func = f_rational
opt_rat_3 = optimize.minimize(least_squares, ab_init, method='nelder-mead', options={'xatol': 1e-3, 'disp': True})

"""##Plot"""

plt.figure(figsize=(18,9))
fig1 = plt.scatter(x, y, c='grey')
fig2 = plt.plot(x, y_real, label='real')
fig3 = plt.plot(x, f_rational(x, opt_rat_1[0], opt_rat_1[1]), label='exhaustive')
fig4 = plt.plot(x, f_rational(x, opt_rat_2.x[0], opt_rat_2.x[1]), label='gauss')
fig5 = plt.plot(x, f_rational(x, opt_rat_3.x[0], opt_rat_3.x[1]), label='nelder-mead')
plt.legend()
plt.grid(True)
plt.show()